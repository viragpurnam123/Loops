/*
 * generated by Xtext 2.25.0
 */
package org.xtext.example.loops.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class LoopsDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ScriptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.loops.LoopsDsl.Script");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScriptKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cScriptNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cScriptNameEXPRESSIONTerminalRuleCall_1_0 = (RuleCall)cScriptNameAssignment_1.eContents().get(0);
		private final Assignment cRepeatAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRepeatRepeatParserRuleCall_2_0 = (RuleCall)cRepeatAssignment_2.eContents().get(0);
		
		//Script: 'script' scriptName=EXPRESSION repeat=Repeat;
		@Override public ParserRule getRule() { return rule; }
		
		//'script' scriptName=EXPRESSION repeat=Repeat
		public Group getGroup() { return cGroup; }
		
		//'script'
		public Keyword getScriptKeyword_0() { return cScriptKeyword_0; }
		
		//scriptName=EXPRESSION
		public Assignment getScriptNameAssignment_1() { return cScriptNameAssignment_1; }
		
		//EXPRESSION
		public RuleCall getScriptNameEXPRESSIONTerminalRuleCall_1_0() { return cScriptNameEXPRESSIONTerminalRuleCall_1_0; }
		
		//repeat=Repeat
		public Assignment getRepeatAssignment_2() { return cRepeatAssignment_2; }
		
		//Repeat
		public RuleCall getRepeatRepeatParserRuleCall_2_0() { return cRepeatRepeatParserRuleCall_2_0; }
	}
	public class RepeatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.loops.LoopsDsl.Repeat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRepeatKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionEXPRESSIONTerminalRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNumAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNumINTTerminalRuleCall_4_0 = (RuleCall)cNumAssignment_4.eContents().get(0);
		private final Keyword cTimesKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Repeat: 'repeat' '{' expression=EXPRESSION '}' num=INT 'times';
		@Override public ParserRule getRule() { return rule; }
		
		//'repeat' '{' expression=EXPRESSION '}' num=INT 'times'
		public Group getGroup() { return cGroup; }
		
		//'repeat'
		public Keyword getRepeatKeyword_0() { return cRepeatKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//expression=EXPRESSION
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//EXPRESSION
		public RuleCall getExpressionEXPRESSIONTerminalRuleCall_2_0() { return cExpressionEXPRESSIONTerminalRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
		
		//num=INT
		public Assignment getNumAssignment_4() { return cNumAssignment_4; }
		
		//INT
		public RuleCall getNumINTTerminalRuleCall_4_0() { return cNumINTTerminalRuleCall_4_0; }
		
		//'times'
		public Keyword getTimesKeyword_5() { return cTimesKeyword_5; }
	}
	
	
	private final ScriptElements pScript;
	private final RepeatElements pRepeat;
	private final TerminalRule tEXPRESSION;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public LoopsDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pScript = new ScriptElements();
		this.pRepeat = new RepeatElements();
		this.tEXPRESSION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.loops.LoopsDsl.EXPRESSION");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.loops.LoopsDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Script: 'script' scriptName=EXPRESSION repeat=Repeat;
	public ScriptElements getScriptAccess() {
		return pScript;
	}
	
	public ParserRule getScriptRule() {
		return getScriptAccess().getRule();
	}
	
	//Repeat: 'repeat' '{' expression=EXPRESSION '}' num=INT 'times';
	public RepeatElements getRepeatAccess() {
		return pRepeat;
	}
	
	public ParserRule getRepeatRule() {
		return getRepeatAccess().getRule();
	}
	
	//terminal EXPRESSION: ('a'..'z'|'A'..'Z'|'_'|'"'|'('|')'|'.'|',') ('a'..'z'|'A'..'Z'|'_'|'0'..'9'|'"'|'('|')'|'.'|',')*;
	public TerminalRule getEXPRESSIONRule() {
		return tEXPRESSION;
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
